name: Test and Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DB_ENGINE: django.db.backends.mysql
      DB_NAME: gntf_test
      DB_HOST: localhost
      DB_USER: root
      DB_PASSWORD: root
      AWS_REGION: us-east-1
      ECS_CLUSTER: gntf_cluster
      CONTAINER_NAME: gntf_app
      ECS_SERVICE: gntf_service
      ECS_TD: .github/workflows/td.json
      ALLOWED_HOSTS: '127.0.0.1,localhost'
      CORS_ALLOWED_ORIGINS: 'http://localhost:3000,http://127.0.0.1:3000'

    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - name: Set up MySQL
        run: |
          sudo systemctl start mysql
          mysql -e 'CREATE DATABASE gntf_test;' -uroot -proot
          mysql -e 'SHOW DATABASES;' -uroot -proot

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Pipenv
        run: |
          python -m pip install --upgrade pipenv

      - id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --deploy --dev

      - name: Run Migrations
        run: pipenv run python manage.py migrate

      - name: Run Tests
        run: |
          pipenv run pytest

  deploy:
    runs-on: ubuntu-latest

    needs: [tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag and Push to AMAZON ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: gntf_td
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TD }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.gntf_td.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true